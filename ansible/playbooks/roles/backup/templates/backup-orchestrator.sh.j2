#!/bin/bash

# ASPHub Backup Orchestrator with 3-2-1 Strategy using Plakar
# This script coordinates all backup operations and implements the 3-2-1 backup strategy

set -euo pipefail

# Load environment variables
source /opt/backup/.env

# Configuration
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
LOG_FILE="${BACKUP_LOG_FILE}"
METRICS_FILE="${BACKUP_METRICS_FILE}"
BACKUP_ID="backup_${TIMESTAMP}"

# Repositories
LOCAL_REPO="$LOCAL_REPO_PATH"
SFTP_REPO="$SFTP_REPO_PATH"
S3_REPO="$S3_REPO_PATH"

# Functions
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [ORCHESTRATOR] $1" | tee -a "${LOG_FILE}"
}

error_exit() {
    log "ERROR: $1"
    update_metrics "failed" "$1"
    exit 1
}

update_metrics() {
    local status="$1"
    local message="${2:-}"
    
    cat > "$METRICS_FILE" << EOF
{
    "backup_id": "${BACKUP_ID}",
    "timestamp": "$(date -Iseconds)",
    "status": "${status}",
    "message": "${message}",
    "duration_seconds": $(($(date +%s) - START_TIME)),
    "repositories": {
        "local": "${LOCAL_REPO}",
        "sftp": "${SFTP_REPO}",
        "s3": "${S3_REPO}"
    }
}
EOF
}

# Plakar functions
plakar_backup() {
    local repo="$1"
    local source="$2"
    local description="$3"
    local passphrase_var="$4"
    
    log "Creating Plakar backup to $repo: $description"
    
    # Set passphrase for Plakar
    export PLAKAR_REPOSITORY_PASSPHRASE="${!passphrase_var}"
    
    # Create backup
    if plakar at "$repo" backup "$source"; then
        log "Successfully created backup in $repo"
        return 0
    else
        log "Failed to create backup in $repo"
        return 1
    fi
}

plakar_sync() {
    local source_repo="$1"
    local target_repo="$2"
    local source_passphrase_var="$3"
    local target_passphrase_var="$4"
    
    log "Synchronizing from $source_repo to $target_repo"
    
    # Set source passphrase
    export PLAKAR_REPOSITORY_PASSPHRASE="${!source_passphrase_var}"
    
    # Create temporary expect script for target passphrase
    local expect_script="/tmp/plakar_sync_${RANDOM}.exp"
    cat > "$expect_script" << EOF
#!/usr/bin/expect -f
set timeout 300
spawn plakar at "$source_repo" sync to "$target_repo"
expect "peer repository passphrase:"
send "${!target_passphrase_var}\r"
expect "peer repository passphrase (confirm):"
send "${!target_passphrase_var}\r"
expect eof
catch wait result
exit [lindex \$result 3]
EOF
    
    chmod +x "$expect_script"
    
    if "$expect_script"; then
        log "Successfully synchronized to $target_repo"
        rm -f "$expect_script"
        return 0
    else
        log "Failed to synchronize to $target_repo"
        rm -f "$expect_script"
        return 1
    fi
}

verify_backup() {
    local repo="$1"
    local passphrase_var="$2"
    
    log "Verifying backup integrity in $repo"
    
    export PLAKAR_REPOSITORY_PASSPHRASE="${!passphrase_var}"
    
    # Get latest snapshot
    local latest_snapshot
    latest_snapshot=$(plakar at "$repo" ls | tail -n1 | awk '{print $2}')
    
    if [[ -n "$latest_snapshot" ]]; then
        if plakar at "$repo" check "$latest_snapshot"; then
            log "Backup verification successful for $repo (snapshot: $latest_snapshot)"
            return 0
        else
            log "Backup verification failed for $repo (snapshot: $latest_snapshot)"
            return 1
        fi
    else
        log "No snapshots found in $repo"
        return 1
    fi
}

cleanup_old_backups() {
    local repo="$1"
    local passphrase_var="$2"
    local retention_days="$3"
    
    log "Cleaning up old backups in $repo (retention: $retention_days days)"
    
    export PLAKAR_REPOSITORY_PASSPHRASE="${!passphrase_var}"
    
    # Get snapshots older than retention period
    local cutoff_date
    cutoff_date=$(date -d "${retention_days} days ago" '+%Y-%m-%d')
    
    plakar at "$repo" ls | while IFS= read -r line; do
        if [[ "$line" =~ ^([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z)[[:space:]]+([a-f0-9]+) ]]; then
            local snapshot_date="${BASH_REMATCH[1]}"
            local snapshot_id="${BASH_REMATCH[2]}"
            local snapshot_date_only="${snapshot_date:0:10}"
            
            if [[ "$snapshot_date_only" < "$cutoff_date" ]]; then
                log "Removing old snapshot: $snapshot_id ($snapshot_date)"
                plakar at "$repo" rm "$snapshot_id" || log "WARNING: Failed to remove snapshot $snapshot_id"
            fi
        fi
    done
}

# Install expect if not present
if ! command -v expect &> /dev/null; then
    log "Installing expect..."
    apt-get update && apt-get install -y expect || error_exit "Failed to install expect"
fi

# Main execution
START_TIME=$(date +%s)

log "Starting ASPHub backup orchestration (ID: $BACKUP_ID)"
update_metrics "running" "Backup orchestration started"

# Step 1: Create data backups
log "=== Step 1: Creating data backups ==="

# PostgreSQL backup
log "Creating PostgreSQL backup..."
if ! /opt/backup/scripts/backup-postgres.sh; then
    error_exit "PostgreSQL backup failed"
fi

# MinIO backup  
log "Creating MinIO backup..."
if ! /opt/backup/scripts/backup-minio.sh; then
    error_exit "MinIO backup failed"
fi

# Step 2: Create Plakar backups (3-2-1 Strategy)
log "=== Step 2: Creating Plakar backups (3-2-1 Strategy) ==="

# Backup 1: Local repository
log "Creating backup 1/3: Local repository"
if ! plakar_backup "$LOCAL_REPO" "/opt/backup/data" "ASPHub daily backup" "LOCAL_REPO_PASSPHRASE"; then
    error_exit "Local Plakar backup failed"
fi

# Backup 2: SFTP repository (synchronize from local)
log "Creating backup 2/3: SFTP repository"
if ! plakar_sync "$LOCAL_REPO" "$SFTP_REPO" "LOCAL_REPO_PASSPHRASE" "SFTP_REPO_PASSPHRASE"; then
    error_exit "SFTP repository synchronization failed"
fi

# Backup 3: S3 repository (synchronize from local)
log "Creating backup 3/3: S3 repository"
if ! plakar_sync "$LOCAL_REPO" "$S3_REPO" "LOCAL_REPO_PASSPHRASE" "S3_REPO_PASSPHRASE"; then
    error_exit "S3 repository synchronization failed"
fi

# Step 3: Verify all backups
log "=== Step 3: Verifying backup integrity ==="

VERIFICATION_FAILED=0

if ! verify_backup "$LOCAL_REPO" "LOCAL_REPO_PASSPHRASE"; then
    log "WARNING: Local backup verification failed"
    VERIFICATION_FAILED=1
fi

if ! verify_backup "$SFTP_REPO" "SFTP_REPO_PASSPHRASE"; then
    log "WARNING: SFTP backup verification failed"
    VERIFICATION_FAILED=1
fi

if ! verify_backup "$S3_REPO" "S3_REPO_PASSPHRASE"; then
    log "WARNING: S3 backup verification failed"
    VERIFICATION_FAILED=1
fi

if [[ $VERIFICATION_FAILED -eq 1 ]]; then
    log "WARNING: Some backup verifications failed, but backup process completed"
fi

# Step 4: Cleanup old backups
log "=== Step 4: Cleaning up old backups ==="

cleanup_old_backups "$LOCAL_REPO" "LOCAL_REPO_PASSPHRASE" "$BACKUP_RETENTION_DAYS"
cleanup_old_backups "$SFTP_REPO" "SFTP_REPO_PASSPHRASE" "$BACKUP_RETENTION_DAYS"
cleanup_old_backups "$S3_REPO" "S3_REPO_PASSPHRASE" "$BACKUP_RETENTION_DAYS"

# Step 5: Generate backup report
log "=== Step 5: Generating backup report ==="

# Calculate sizes
LOCAL_SIZE=$(plakar at "$LOCAL_REPO" ls | tail -n1 | awk '{print $3, $4}' || echo "unknown")
TOTAL_DURATION=$(($(date +%s) - START_TIME))

# Create detailed report
cat > "/var/log/backup/backup_report_${TIMESTAMP}.json" << EOF
{
    "backup_id": "${BACKUP_ID}",
    "timestamp": "$(date -Iseconds)",
    "duration_seconds": ${TOTAL_DURATION},
    "status": "completed",
    "strategy": "3-2-1",
    "repositories": {
        "local": {
            "path": "${LOCAL_REPO}",
            "status": "completed",
            "size": "${LOCAL_SIZE}"
        },
        "sftp": {
            "path": "${SFTP_REPO}",
            "status": "completed"
        },
        "s3": {
            "path": "${S3_REPO}",
            "status": "completed"
        }
    },
    "verification_failures": ${VERIFICATION_FAILED},
    "components": {
        "postgresql": "completed",
        "minio": "completed"
    }
}
EOF

update_metrics "completed" "3-2-1 backup strategy completed successfully"

DURATION_MIN=$((TOTAL_DURATION / 60))
log "=== Backup orchestration completed successfully in ${DURATION_MIN} minutes ==="
log "Backup ID: $BACKUP_ID"
log "Local repository: $LOCAL_REPO"
log "SFTP repository: $SFTP_REPO"
log "S3 repository: $S3_REPO" 