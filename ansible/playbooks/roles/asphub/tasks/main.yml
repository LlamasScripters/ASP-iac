---
- name: Show domain name
  ansible.builtin.debug:
    msg: "{{ domain }}"
  failed_when: domain is not defined

- name: Check github username
  ansible.builtin.debug:
    msg: "✅ Github Username: {{ lookup('ansible.builtin.env', 'GITHUB_USERNAME') }}"
  failed_when: lookup('ansible.builtin.env', 'GITHUB_USERNAME') is not defined

- name: Check github token
  ansible.builtin.debug:
    msg: "✅ Github Token"
  failed_when: lookup('ansible.builtin.env', 'GITHUB_TOKEN') is not defined

- name: Login to ghcr.io
  community.docker.docker_login:
    username: "{{ lookup('ansible.builtin.env', 'GITHUB_USERNAME') }}"
    password: "{{ lookup('ansible.builtin.env', 'GITHUB_TOKEN') }}"
    registry_url: ghcr.io
    reauth: true
  failed_when: lookup('ansible.builtin.env', 'GITHUB_USERNAME') is not defined or lookup('ansible.builtin.env', 'GITHUB_TOKEN') is not defined

- name: Pull frontend image
  community.docker.docker_image_pull:
    name: "{{ asphub_client_image }}"
    tag: "{{ asphub_client_version }}"

- name: Pull backend image
  community.docker.docker_image_pull:
    name: "{{ asphub_server_image }}"
    tag: "{{ asphub_server_version }}"

- name: Pull PostgreSQL image
  community.docker.docker_image_pull:
    name: "{{ asphub_postgres_image }}"
    tag: "{{ asphub_postgres_version }}"

- name: Pull MinIO image
  community.docker.docker_image_pull:
    name: "{{ asphub_minio_image }}"
    tag: "{{ asphub_minio_version }}"

- name: Copy asphub files
  ansible.builtin.copy:
    src: .
    dest: /app/asphub/
    mode: "0644"

- name: Create postgres volume
  community.docker.docker_volume:
    name: postgres_data
    state: present

- name: Delete existing minio Docker service
  community.docker.docker_swarm_service:
    name: minio
    state: absent

- name: Delete existing asphub Docker stacks
  community.docker.docker_stack:
    name: "{{ item }}"
    state: absent
  loop:
    - asphub_application
    - asphub_init_db
    - asphub_storage
    - asphub_database
    - asphub

- name: Create database config Docker Config
  community.docker.docker_config:
    name: postgres_config
    data_src: /app/asphub/postgresql.conf

- name: Create database user Docker Secret
  community.docker.docker_secret:
    name: postgres_user
    data: "{{ asphub_db_vars.POSTGRES_USER }}"

- name: Create database password Docker Secret
  community.docker.docker_secret:
    name: postgres_password
    data: "{{ asphub_db_vars.POSTGRES_PASSWORD }}"

- name: Create database name Docker Secret
  community.docker.docker_secret:
    name: postgres_db
    data: "{{ asphub_db_vars.POSTGRES_DB }}"

- name: Create minio user Docker Secret
  community.docker.docker_secret:
    name: minio_user
    data: "{{ asphub_minio_vars.MINIO_ROOT_USER }}"

- name: Create minio password Docker Secret
  community.docker.docker_secret:
    name: minio_password
    data: "{{ asphub_minio_vars.MINIO_ROOT_PASSWORD }}"

- name: Create .env from env vars
  ansible.builtin.template:
    src: .env.j2
    dest: /app/asphub/.env
    mode: "0644"

- name: Create .env hash
  ansible.builtin.set_fact:
    asphub_env_hash: "{{ asphub_env_vars | hash('sha256') }}"

- name: Create asphub env Docker Secret
  community.docker.docker_secret:
    name: asphub_env
    data_src: /app/asphub/.env
    labels:
      ansible_key: "{{ asphub_env_hash }}"

- name: Create asphub backend network
  community.docker.docker_network:
    name: asphub_backend
    driver: overlay
    scope: swarm

- name: Deploy asphub database stack
  community.docker.docker_stack:
    name: asphub_database
    state: present
    detach: true
    compose: /app/asphub/compose-database.yml
    with_registry_auth: true
  environment:
    POSTGRES_IMAGE: "{{ asphub_postgres_image }}"
    POSTGRES_VERSION: "{{ asphub_postgres_version }}"

- name: Wait for database to be ready
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      docker service ls --filter name=asphub_database_postgres --format "{{ '{{.Replicas}}' }}" | grep -c "1/1"
    executable: /bin/bash
  register: database_ready
  until: database_ready.stdout | int == 1
  retries: 10
  delay: 5
  changed_when: false

- name: Deploy asphub storage stack
  community.docker.docker_stack:
    name: asphub_storage
    state: present
    detach: true
    compose: /app/asphub/compose-storage.yml
    with_registry_auth: true
  environment:
    MINIO_IMAGE: "{{ asphub_minio_image }}"
    MINIO_VERSION: "{{ asphub_minio_version }}"

- name: Wait for storage to be ready
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      docker service ls --filter name=asphub_storage_minio --format "{{ '{{.Replicas}}' }}" | grep -c "1/1"
    executable: /bin/bash
  register: storage_ready
  until: storage_ready.stdout | int == 1
  retries: 10
  delay: 5
  changed_when: false

- name: Run database migrations
  community.docker.docker_container:
    name: asphub_init_db_temp
    image: "{{ asphub_server_image }}:{{ asphub_server_version }}"
    state: started
    detach: false
    cleanup: true
    networks:
      - name: asphub_backend
    env:
      DATABASE_URL: "{{ asphub_env_vars.DATABASE_URL }}"
    command: ["npx", "drizzle-kit", "migrate"]
  tags:
    - init-db
    - migrations

- name: Deploy asphub application stack
  community.docker.docker_stack:
    name: asphub_application
    state: present
    detach: true
    compose: /app/asphub/compose-application.yml
    with_registry_auth: true
  environment:
    DOMAIN: "{{ domain }}"
    ASPHUB_CLIENT_IMAGE: "{{ asphub_client_image }}"
    ASPHUB_CLIENT_VERSION: "{{ asphub_client_version }}"
    ASPHUB_SERVER_IMAGE: "{{ asphub_server_image }}"
    ASPHUB_SERVER_VERSION: "{{ asphub_server_version }}"
    HOST: 'https://{{ domain }}'
    DATABASE_URL: '{{ asphub_env_vars.DATABASE_URL }}'
    BETTER_AUTH_SECRET: '{{ asphub_env_vars.BETTER_AUTH_SECRET }}'
    BETTER_AUTH_URL: '{{ asphub_env_vars.BETTER_AUTH_URL }}'
    GOOGLE_CLIENT_ID: '{{ asphub_env_vars.GOOGLE_CLIENT_ID }}'
    GOOGLE_CLIENT_SECRET: '{{ asphub_env_vars.GOOGLE_CLIENT_SECRET }}'
    BREVO_API_KEY: '{{ asphub_env_vars.BREVO_API_KEY }}'
    S3_ACCESS_KEY_ID: '{{ asphub_env_vars.S3_ACCESS_KEY_ID }}'
    S3_SECRET_ACCESS_KEY: '{{ asphub_env_vars.S3_SECRET_ACCESS_KEY }}'
    S3_REGION: '{{ asphub_env_vars.S3_REGION }}'
    S3_BUCKET: '{{ asphub_env_vars.S3_BUCKET }}'
    S3_ENDPOINT: '{{ asphub_env_vars.S3_ENDPOINT }}'

- name: Wait for application stack services to be ready
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      docker stack ps asphub_application --format {{  '{{.CurrentState}}' }} | grep -c "Running"
    executable: /bin/bash
  register: asphub_application_services
  until: asphub_application_services.stdout | int == 2
  retries: 20 # Higher retries count to reduce time
  delay: 1
  changed_when: false

- name: Show deployment success
  ansible.builtin.debug:
    msg: |
      ✅ AspHub deployment completed successfully
      - Database stack: asphub_database
      - Storage stack: asphub_storage
      - Application stack: asphub_application
      - Database migrations: Completed via init-db service
