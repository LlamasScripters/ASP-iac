---
services:
  traefik:
    image: traefik:v3.4
    command:
      # Add dynamic configuration
      - --providers.file.directory=/dyn
      # HTTP EntryPoint
      - "--entrypoints.web.address=:80"

      # Configure HTTP to HTTPS Redirection
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"

      # HTTPS EntryPoint
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--entryPoints.websecure.http.middlewares=fail2ban@file"

      # Enable the Docker Swarm provider (instead of Docker provider)
      - "--providers.swarm.endpoint=unix:///var/run/docker.sock"

      # Watch for Swarm service changes (requires socket access)
      - "--providers.swarm.watch=true"

      # Recommended: Don't expose services by default; require explicit labels
      - "--providers.swarm.exposedbydefault=false"

      # Specify the default network for Traefik to connect to services
      - "--providers.swarm.network=proxy_traefik_proxy"

      # API & Dashboard
      - "--api.dashboard=true" # Enable the dashboard
      - "--api.insecure=false" # Explicitly disable insecure API mod

      # Configure Let's Encrypt certificate resolver (using staging to bypass rate limit)
      - "--certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--entrypoints.websecure.http.tls.certresolver=true"

      # Observability
      - "--log.level=INFO" # Set the Log Level e.g INFO, DEBUG
      - "--accesslog=true" # Enable Access Logs
      - "--metrics.prometheus=true" # Enable Prometheus

      # Fail2ban
      - --experimental.plugins.fail2ban.modulename=github.com/tomMoulard/fail2ban
      - --experimental.plugins.fail2ban.version=v0.8.6


    deploy:
      mode: replicated
      replicas: 1

      placement:
      # Placement constraints restrict where Traefik tasks can run.
      # Running on manager nodes is common for accessing the Swarm API via the socket.
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"

        - "traefik.http.middlewares.compression.compress=true"

        # Dashboard router
        - "traefik.http.routers.dashboard.rule=Host(`${PROXY_DOMAIN}`)"
        - "traefik.http.routers.dashboard.entrypoints=websecure"
        - "traefik.http.routers.dashboard.service=api@internal"
        - "traefik.http.routers.dashboard.tls=true"

        # Metrics router
        - "traefik.http.routers.metrics.rule=Host(`${PROXY_DOMAIN}`) && PathPrefix(`/metrics`)"
        - "traefik.http.routers.metrics.entrypoints=websecure"
        - "traefik.http.routers.metrics.service=prometheus@internal"
        - "traefik.http.routers.metrics.tls=true"

        # Basicâ€‘auth middleware
        - "traefik.http.middlewares.dashboard-auth.basicauth.usersfile=/run/secrets/proxy_users"
        - "traefik.http.routers.dashboard.middlewares=dashboard-auth@swarm"

        # Service hint
        - "traefik.http.services.traefik.loadbalancer.server.port=8080"


        # Rate limiting
        - "traefik.http.middlewares.ratelimit.ratelimit.average=25"
        - "traefik.http.middlewares.ratelimit.ratelimit.burst=50"
        - "traefik.http.middlewares.ratelimit.ratelimit.period=5m"

    networks:
      - traefik_proxy

    secrets:
      - proxy_users

    ports:
      - "80:80"
      - "443:443"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt:/letsencrypt
    configs:
      - source: traefik_config
        target: /dyn

networks:
  traefik_proxy:
    driver: overlay
    attachable: true

secrets:
  proxy_users:
    external: true

configs:
  traefik_config:
    external: true

volumes:
  letsencrypt:
    name: letsencrypt
