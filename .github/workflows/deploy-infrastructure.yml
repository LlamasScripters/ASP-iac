name: "Deploy Infrastructure"

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        type: environment
      auto_approve:
        description: "Auto approve the plan (ignored for main branch - always auto-approved)"
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pull-requests: write
  packages: write

jobs:
  get-environment:
    # Environment to lowercase to match folder name
    name: "Get Environment"
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.get-environment.outputs.ENVIRONMENT }}
      repository_owner: ${{ steps.get-environment.outputs.REPOSITORY_OWNER }}
    steps:
      - name: Get Environment
        id: get-environment
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT=${{ github.event.inputs.environment }}
          else
            # Main branch push defaults to production
            ENVIRONMENT="production"
          fi
          REPOSITORY_OWNER="${{ github.repository_owner }}"
          ENVIRONMENT=${ENVIRONMENT@L}
          REPOSITORY_OWNER=${REPOSITORY_OWNER@L}
          echo "ENVIRONMENT=${ENVIRONMENT}" >> "$GITHUB_OUTPUT"
          echo "REPOSITORY_OWNER=${REPOSITORY_OWNER}" >> "$GITHUB_OUTPUT"

  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    needs: get-environment
    environment: ${{ needs.get-environment.outputs.environment }}
    env:
      HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
      OVH_ENDPOINT: ${{ secrets.OVH_ENDPOINT }}
      OVH_APPLICATION_KEY: ${{ secrets.OVH_APPLICATION_KEY }}
      OVH_APPLICATION_SECRET: ${{ secrets.OVH_APPLICATION_SECRET }}
      OVH_CONSUMER_KEY: ${{ secrets.OVH_CONSUMER_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.11.4"
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check  -recursive -no-color

      - name: Terraform Init
        id: init
        run: terraform -chdir=./terraform/envs/${{ needs.get-environment.outputs.environment }} init -no-color

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=./terraform/envs/${{ needs.get-environment.outputs.environment }} validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform -chdir=./terraform/envs/${{ needs.get-environment.outputs.environment }} plan -no-color -out=tfplan

      - name: Save Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ needs.get-environment.outputs.environment }}
          path: ./terraform/envs/${{ needs.get-environment.outputs.environment }}/tfplan
          retention-days: 1

      - name: Show Plan
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
        run: terraform -chdir=./terraform/envs/${{ needs.get-environment.outputs.environment }} show -no-color tfplan

  deploy-infrastructure:
    name: "Deploy Infrastructure"
    needs: [get-environment, terraform-plan]
    if: |
      (
        github.event_name == 'push' && github.ref == 'refs/heads/main'
      ) || (
        github.event_name == 'workflow_dispatch' && github.event.inputs.auto_approve == 'true'
      )
    runs-on: ubuntu-latest
    environment: ${{ needs.get-environment.outputs.environment }}

    env:
      HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
      OVH_ENDPOINT: ${{ secrets.OVH_ENDPOINT }}
      OVH_APPLICATION_KEY: ${{ secrets.OVH_APPLICATION_KEY }}
      OVH_APPLICATION_SECRET: ${{ secrets.OVH_APPLICATION_SECRET }}
      OVH_CONSUMER_KEY: ${{ secrets.OVH_CONSUMER_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.11.4"
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ needs.get-environment.outputs.environment }}
          path: ./terraform/envs/${{ needs.get-environment.outputs.environment }}

      - name: Terraform Init
        run: terraform -chdir=./terraform/envs/${{ needs.get-environment.outputs.environment }} init

      - name: Terraform Apply
        run: terraform -chdir=./terraform/envs/${{ needs.get-environment.outputs.environment }} apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: terraform-output
        run: |
          echo "manager_ip=$(terraform -chdir=./terraform/envs/${{ needs.get-environment.outputs.environment }} output -raw manager_ip)" >> "$GITHUB_OUTPUT"
          echo "worker1_ip=$(terraform -chdir=./terraform/envs/${{ needs.get-environment.outputs.environment }} output -raw worker1_ip)" >> "$GITHUB_OUTPUT"
          echo "worker2_ip=$(terraform -chdir=./terraform/envs/${{ needs.get-environment.outputs.environment }} output -raw worker2_ip)" >> "$GITHUB_OUTPUT"

  ansible-deploy:
    name: "Ansible Deploy"
    needs: [get-environment, deploy-infrastructure]
    if: |
      (
        github.event_name == 'push' && github.ref == 'refs/heads/main'
      ) || (
        github.event_name == 'workflow_dispatch' && github.event.inputs.auto_approve == 'true'
      )
    runs-on: ubuntu-latest
    environment: ${{ needs.get-environment.outputs.environment }}
    env:
      HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
      OVH_ENDPOINT: ${{ secrets.OVH_ENDPOINT }}
      OVH_APPLICATION_KEY: ${{ secrets.OVH_APPLICATION_KEY }}
      OVH_APPLICATION_SECRET: ${{ secrets.OVH_APPLICATION_SECRET }}
      OVH_CONSUMER_KEY: ${{ secrets.OVH_CONSUMER_KEY }}
      ANSIBLE_VAULT_PASS: ${{ secrets.ANSIBLE_VAULT_PASS }}
      GITHUB_USERNAME: ${{ github.actor }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Token to pull images from ghcr.io

    steps:
      # Repeat Terraform Init to ensure the state is up-to-date and job is self-contained
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.11.4"
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Terraform Init
        run: terraform -chdir=./terraform/envs/${{ needs.get-environment.outputs.environment }} init

      - name: Install the latest version of uv
        id: setup-uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: |
            "pyproject.toml"
            "uv.lock"
            ".python-version"

      - name: Check uv cache hit
        if: steps.setup-uv.outputs.cache-hit == 'true'
        run: echo "Cache was restored"

      - name: Install Ansible
        run: |
          uv sync

      - name: Setup SSH for Ansible
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          manager_ip=$(terraform -chdir=./terraform/envs/${{ needs.get-environment.outputs.environment }} output -raw manager_ip)
          worker1_ip=$(terraform -chdir=./terraform/envs/${{ needs.get-environment.outputs.environment }} output -raw worker1_ip)
          worker2_ip=$(terraform -chdir=./terraform/envs/${{ needs.get-environment.outputs.environment }} output -raw worker2_ip)
          ssh-keyscan $manager_ip >> ~/.ssh/known_hosts
          ssh-keyscan $worker1_ip >> ~/.ssh/known_hosts
          ssh-keyscan $worker2_ip >> ~/.ssh/known_hosts

      - name: Test Ansible Connection
        run: |
          cd ansible
          ansible all -m ping -i inventory.yml

      - name: Run Ansible Playbook
        run: |
          cd ansible
          ansible-playbook -i inventory.yml playbooks/site.yml
