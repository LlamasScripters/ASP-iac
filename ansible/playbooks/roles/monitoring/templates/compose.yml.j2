services:
  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION}
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION}'
      - '--storage.tsdb.retention.size=2GB'  # Reduced from 4GB
      - '--storage.tsdb.wal-compression'
      - '--storage.tsdb.min-block-duration=2h'  # Optimize compaction
      - '--storage.tsdb.max-block-duration=25h'
      - '--query.max-concurrency=4'  # Limit concurrent queries
      - '--query.max-samples=500000'  # Prevent memory exhaustion
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - prometheus_data:/prometheus
    configs:
      - source: {{ prometheus_config_name }}
        target: /etc/prometheus/prometheus.yml
      - source: {{ prometheus_alert_rules_name }}
        target: /etc/prometheus/alert_rules.yml
    networks:
      - monitoring_network
      - proxy_traefik_proxy
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "0.7"
          memory: "1536M"
        reservations:
          cpus: "0.35"
          memory: "768M"
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.prometheus.rule=Host(`${PROMETHEUS_DOMAIN}`)"
        - "traefik.http.routers.prometheus.service=prometheus"
        - "traefik.http.routers.prometheus.entrypoints=websecure"
        - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
        - "traefik.http.routers.prometheus.tls=true"
        - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION}
    environment:
      GF_SECURITY_ADMIN_USER: "${GRAFANA_ADMIN_USER}"
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD}"
      GF_SERVER_ROOT_URL: "https://${GRAFANA_DOMAIN}"
      GF_SERVER_SERVE_FROM_SUB_PATH: "false"
      GF_INSTALL_PLUGINS: "grafana-piechart-panel,grafana-worldmap-panel"
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_USERS_ALLOW_ORG_CREATE: "false"
      GF_USERS_AUTO_ASSIGN_ORG: "true"
      GF_USERS_AUTO_ASSIGN_ORG_ROLE: "Viewer"
      GF_SMTP_ENABLED: "false"
      # Performance optimizations
      GF_DATABASE_WAL: "true"
      GF_EXPLORE_ENABLED: "false"  # Disable if not needed
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_ANALYTICS_CHECK_FOR_UPDATES: "false"
    volumes:
      - grafana_data:/var/lib/grafana
    configs:
      - source: {{ grafana_datasources_name }}
        target: /etc/grafana/provisioning/datasources/prometheus.yml
      - source: {{ grafana_dashboards_name }}
        target: /etc/grafana/provisioning/dashboards/dashboard.yml
      - source: {{ grafana_asphub_overview_dashboard_name }}
        target: /etc/grafana/provisioning/dashboards/asphub-overview-dashboard.json
      - source: {{ grafana_asphub_server_dashboard_name }}
        target: /etc/grafana/provisioning/dashboards/asphub-server-dashboard.json
    networks:
      - monitoring_network
      - proxy_traefik_proxy
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "0.4"
          memory: "1024M"
        reservations:
          cpus: "0.2"
          memory: "512M"
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana.rule=Host(`${GRAFANA_DOMAIN}`)"
        - "traefik.http.routers.grafana.service=grafana"
        - "traefik.http.routers.grafana.entrypoints=websecure"
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"
        - "traefik.http.routers.grafana.tls=true"
        - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"

  node-exporter:
    image: prom/node-exporter:${NODE_EXPORTER_VERSION}
    command:
      - '--path.rootfs=/host'
      - '--collector.disable-defaults'
      - '--collector.cpu'
      - '--collector.diskstats'
      - '--collector.filesystem'
      - '--collector.loadavg'
      - '--collector.meminfo'
      - '--collector.netdev'
      - '--collector.stat'
      - '--collector.time'
      - '--collector.uname'
      - '--collector.vmstat'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--web.listen-address=0.0.0.0:9100'
      - '--web.max-requests=10'  # Limit concurrent requests
    volumes:
      - /:/host:ro,rslave
    networks:
      - monitoring_network
    deploy:
      mode: global
      resources:
        limits:
          cpus: "0.1"
          memory: "128M"
        reservations:
          cpus: "0.05"
          memory: "64M"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:${CADVISOR_VERSION}
    command:
      - '--housekeeping_interval=45s'  # Increased from 30s
      - '--max_housekeeping_interval=60s'  # Increased from 35s
      - '--event_storage_event_limit=default=0'
      - '--event_storage_age_limit=default=0'
      - '--disable_metrics=percpu,sched,tcp,udp,disk,diskIO,hugetlb,referenced_memory,cpu_topology,resctrl,advtcp,memory_numa'
      - '--storage_duration=90s'  # Reduced from 2m
      - '--enable_load_reader=false'  # Disabled to save resources
      - '--docker_only=true'
      - '--max_procs=1000'  # Limit process monitoring
      - '--application_metrics_count_limit=100'
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - monitoring_network
    deploy:
      mode: global
      resources:
        limits:
          cpus: "0.2"
          memory: "256M"
        reservations:
          cpus: "0.1"
          memory: "128M"

  alertmanager:
    image: prom/alertmanager:${ALERTMANAGER_VERSION}
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--data.retention=72h'  # Reduce retention
      - '--cluster.settle-timeout=5s'
      - '--web.get-concurrency=4'
      - '--web.timeout=10s'
    volumes:
      - alertmanager_data:/alertmanager
    configs:
      - source: {{ alertmanager_config_name }}
        target: /etc/alertmanager/alertmanager.yml
    networks:
      - monitoring_network
      - proxy_traefik_proxy
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "0.1"
          memory: "256M"
        reservations:
          cpus: "0.05"
          memory: "128M"
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.alertmanager.rule=Host(`${ALERTMANAGER_DOMAIN}`)"
        - "traefik.http.routers.alertmanager.service=alertmanager"
        - "traefik.http.routers.alertmanager.entrypoints=websecure"
        - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"
        - "traefik.http.routers.alertmanager.tls=true"
        - "traefik.http.routers.alertmanager.tls.certresolver=letsencrypt"

networks:
  monitoring_network:
    external: true
  proxy_traefik_proxy:
    external: true

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local

configs:
  {{ prometheus_config_name }}:
    external: true
  {{ prometheus_alert_rules_name }}:
    external: true
  {{ alertmanager_config_name }}:
    external: true
  {{ grafana_datasources_name }}:
    external: true
  {{ grafana_dashboards_name }}:
    external: true
  {{ grafana_asphub_overview_dashboard_name }}:
    external: true
  {{ grafana_asphub_server_dashboard_name }}:
    external: true