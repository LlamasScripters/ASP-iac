#!/bin/bash

# ASPHub Backup Restore Script
# This script allows restoration from any of the three backup repositories

set -euo pipefail

# Load environment variables
source /opt/backup/.env

LOG_FILE="${BACKUP_LOG_FILE}"

# Functions
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [RESTORE] $1" | tee -a "${LOG_FILE}"
}

error_exit() {
    log "ERROR: $1"
    exit 1
}

usage() {
    cat << EOF
Usage: $0 [OPTIONS]

ASPHub Backup Restore Script

OPTIONS:
    -r, --repository TYPE    Repository type (local|sftp|s3)
    -s, --snapshot ID        Snapshot ID to restore (optional, uses latest if not specified)
    -t, --type COMPONENT     Component to restore (postgres|minio|all)
    -d, --destination DIR    Destination directory for restore
    -l, --list              List available snapshots
    -h, --help              Show this help message

EXAMPLES:
    # List snapshots in local repository
    $0 --repository local --list

    # Restore latest PostgreSQL backup from S3
    $0 --repository s3 --type postgres --destination /tmp/restore

    # Restore specific snapshot from SFTP
    $0 --repository sftp --snapshot abc123def --type all --destination /tmp/restore

EOF
}

list_snapshots() {
    local repo_type="$1"
    local repo_path
    local passphrase_var
    
    case "$repo_type" in
        "local")
            repo_path="$LOCAL_REPO_PATH"
            passphrase_var="LOCAL_REPO_PASSPHRASE"
            ;;
        "sftp")
            repo_path="$SFTP_REPO_PATH"
            passphrase_var="SFTP_REPO_PASSPHRASE"
            ;;
        "s3")
            repo_path="$S3_REPO_PATH"
            passphrase_var="S3_REPO_PASSPHRASE"
            ;;
        *)
            error_exit "Invalid repository type: $repo_type"
            ;;
    esac
    
    log "Listing snapshots in $repo_type repository: $repo_path"
    
    export PLAKAR_REPOSITORY_PASSPHRASE="${!passphrase_var}"
    
    plakar at "$repo_path" ls || error_exit "Failed to list snapshots"
}

get_latest_snapshot() {
    local repo_type="$1"
    local repo_path
    local passphrase_var
    
    case "$repo_type" in
        "local")
            repo_path="$LOCAL_REPO_PATH"
            passphrase_var="LOCAL_REPO_PASSPHRASE"
            ;;
        "sftp")
            repo_path="$SFTP_REPO_PATH"
            passphrase_var="SFTP_REPO_PASSPHRASE"
            ;;
        "s3")
            repo_path="$S3_REPO_PATH"
            passphrase_var="S3_REPO_PASSPHRASE"
            ;;
        *)
            error_exit "Invalid repository type: $repo_type"
            ;;
    esac
    
    export PLAKAR_REPOSITORY_PASSPHRASE="${!passphrase_var}"
    
    plakar at "$repo_path" ls | tail -n1 | awk '{print $2}'
}

restore_component() {
    local repo_type="$1"
    local snapshot_id="$2"
    local component="$3"
    local destination="$4"
    
    local repo_path
    local passphrase_var
    
    case "$repo_type" in
        "local")
            repo_path="$LOCAL_REPO_PATH"
            passphrase_var="LOCAL_REPO_PASSPHRASE"
            ;;
        "sftp")
            repo_path="$SFTP_REPO_PATH"
            passphrase_var="SFTP_REPO_PASSPHRASE"
            ;;
        "s3")
            repo_path="$S3_REPO_PATH"
            passphrase_var="S3_REPO_PASSPHRASE"
            ;;
        *)
            error_exit "Invalid repository type: $repo_type"
            ;;
    esac
    
    export PLAKAR_REPOSITORY_PASSPHRASE="${!passphrase_var}"
    
    log "Restoring $component from $repo_type repository"
    log "Snapshot: $snapshot_id"
    log "Destination: $destination"
    
    # Create destination directory
    mkdir -p "$destination" || error_exit "Failed to create destination directory"
    
    case "$component" in
        "postgres")
            log "Restoring PostgreSQL data..."
            plakar at "$repo_path" restore -to "$destination" "$snapshot_id:/opt/backup/data/postgres" || error_exit "Failed to restore PostgreSQL data"
            ;;
        "minio")
            log "Restoring MinIO data..."
            plakar at "$repo_path" restore -to "$destination" "$snapshot_id:/opt/backup/data/minio" || error_exit "Failed to restore MinIO data"
            ;;
        "all")
            log "Restoring all components..."
            plakar at "$repo_path" restore -to "$destination" "$snapshot_id:/opt/backup/data" || error_exit "Failed to restore all data"
            ;;
        *)
            error_exit "Invalid component type: $component. Use postgres, minio, or all"
            ;;
    esac
    
    log "Restore completed successfully"
    log "Restored data is available at: $destination"
}

# Parse command line arguments
REPOSITORY=""
SNAPSHOT=""
COMPONENT=""
DESTINATION=""
LIST_SNAPSHOTS=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -r|--repository)
            REPOSITORY="$2"
            shift 2
            ;;
        -s|--snapshot)
            SNAPSHOT="$2"
            shift 2
            ;;
        -t|--type)
            COMPONENT="$2"
            shift 2
            ;;
        -d|--destination)
            DESTINATION="$2"
            shift 2
            ;;
        -l|--list)
            LIST_SNAPSHOTS=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            error_exit "Unknown option: $1"
            ;;
    esac
done

# Validate required arguments
if [[ -z "$REPOSITORY" ]]; then
    error_exit "Repository type is required. Use -r or --repository"
fi

if [[ "$REPOSITORY" != "local" && "$REPOSITORY" != "sftp" && "$REPOSITORY" != "s3" ]]; then
    error_exit "Invalid repository type: $REPOSITORY. Use local, sftp, or s3"
fi

if [[ "$LIST_SNAPSHOTS" == true ]]; then
    list_snapshots "$REPOSITORY"
    exit 0
fi

if [[ -z "$COMPONENT" ]]; then
    error_exit "Component type is required. Use -t or --type (postgres|minio|all)"
fi

if [[ -z "$DESTINATION" ]]; then
    error_exit "Destination directory is required. Use -d or --destination"
fi

# Get snapshot ID if not provided
if [[ -z "$SNAPSHOT" ]]; then
    log "No snapshot specified, using latest snapshot"
    SNAPSHOT=$(get_latest_snapshot "$REPOSITORY")
    if [[ -z "$SNAPSHOT" ]]; then
        error_exit "No snapshots found in repository"
    fi
    log "Latest snapshot: $SNAPSHOT"
fi

# Perform restore
log "Starting restore operation..."
log "Repository: $REPOSITORY"
log "Snapshot: $SNAPSHOT"
log "Component: $COMPONENT"
log "Destination: $DESTINATION"

restore_component "$REPOSITORY" "$SNAPSHOT" "$COMPONENT" "$DESTINATION"

log "Restore operation completed successfully" 