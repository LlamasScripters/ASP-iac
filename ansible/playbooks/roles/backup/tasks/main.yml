---
# ASPHub Backup avec strat√©gie 3-2-1 - Solution simplifi√©e
# Remplace la solution complexe par un conteneur Docker avec Plakar

- name: Show backup configuration
  ansible.builtin.debug:
    msg: "Setting up simplified 3-2-1 backup with Plakar container"

- name: Create backup directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    owner: root
    group: root
  loop:
    - /opt/backup
    - /opt/backup/scripts
    - /opt/backup/logs

- name: Create backup environment file
  ansible.builtin.template:
    src: backup-env.j2
    dest: /opt/backup/.env
    mode: '0644'
    owner: root
    group: root

- name: Create backup script
  ansible.builtin.template:
    src: backup-script.sh.j2
    dest: /opt/backup/scripts/backup-script.sh
    mode: '0755'
    owner: root
    group: root

- name: Create hybrid backup script (alternative to avoid Plakar freeze)
  ansible.builtin.template:
    src: backup-s3-hybrid.sh.j2
    dest: /opt/backup/scripts/backup-s3-hybrid.sh
    mode: '0755'
    owner: root
    group: root

- name: Create restore script
  ansible.builtin.template:
    src: restore-script.sh.j2
    dest: /opt/backup/scripts/restore-script.sh
    mode: '0755'
    owner: root
    group: root

- name: Copy backup Dockerfile
  ansible.builtin.copy:
    src: Dockerfile
    dest: /opt/backup/Dockerfile
    mode: '0644'
    owner: root
    group: root

- name: Copy backup script for Docker build
  ansible.builtin.copy:
    src: "/opt/backup/scripts/{{ backup_script }}"
    dest: /opt/backup/backup-script.sh
    mode: '0755'
    owner: root
    group: root
    remote_src: true

- name: Copy backup Docker Compose file
  ansible.builtin.copy:
    src: compose-backup.yml
    dest: /opt/backup/compose-backup.yml
    mode: '0644'
    owner: root
    group: root

- name: Deploy backup stack
  community.docker.docker_stack:
    name: asphub_backup
    state: present
    # detach: true
    compose: /opt/backup/compose-backup.yml
    with_registry_auth: true
  environment:
    AWS_ACCESS_KEY_ID: "{{ vault_backup_s3_access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ vault_backup_s3_secret_key }}"

- name: Wait for backup service to be ready
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      docker service ls --filter name=asphub_backup --format "{{ '{{.Replicas}}' }}" | grep -c "1/1"
    executable: /bin/bash
  register: backup_ready
  until: backup_ready.stdout | int == 1
  retries: 10
  delay: 5
  changed_when: false

# - name: Create backup management scripts
#   ansible.builtin.template:
#     src: "{{ item.src }}"
#     dest: "/opt/backup/scripts/{{ item.dest }}"
#     mode: '0755'
#     owner: root
#     group: root
#   loop:
#     - { src: "backup-now.sh.j2", dest: "backup-now.sh" }
#     - { src: "backup-status.sh.j2", dest: "backup-status.sh" }
#     - { src: "test-backup.sh.j2", dest: "test-backup.sh" }
#   # Commented out due to Jinja2 template issues - scripts are created manually

- name: Show backup deployment success
  ansible.builtin.debug:
    msg: |
      ‚úÖ Simplified backup solution deployed successfully
      
      üê≥ Backup container: asphub_backup
      üìÅ Configuration: /opt/backup/
      üì¶ Strategies: 3-2-1 (3 copies, 2 media, 1 offsite)
      ‚è∞ Schedule: Daily at 2:00 AM
      
      üîß Management commands:
      - Test solution: /opt/backup/scripts/test-backup.sh
      - Manual backup: /opt/backup/scripts/backup-now.sh
      - Check status: /opt/backup/scripts/backup-status.sh
      - Restore data: /opt/backup/scripts/restore-script.sh
      
      üìä Logs: docker logs asphub_backup
      
      This replaces the previous complex solution with:
      - ‚ùå No more Go installation
      - ‚ùå No more native Plakar installation
      - ‚ùå No more system users
      - ‚ùå No more systemd services
      - ‚ùå No more complex scripts
      - ‚úÖ Simple Docker container
      - ‚úÖ Volume mounting
      - ‚úÖ Integrated cron job
