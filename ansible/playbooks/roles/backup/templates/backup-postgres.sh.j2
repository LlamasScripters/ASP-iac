#!/bin/bash

# PostgreSQL Backup Script for ASPHub
# This script dumps the PostgreSQL database running in Docker Swarm

set -euo pipefail

# Load environment variables
source /opt/backup/.env

# Configuration
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="${POSTGRES_BACKUP_PATH}/${TIMESTAMP}"
LOG_FILE="${BACKUP_LOG_FILE}"

# Functions
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [POSTGRES] $1" | tee -a "${LOG_FILE}"
}

error_exit() {
    log "ERROR: $1"
    exit 1
}

cleanup() {
    if [[ -n "${BACKUP_DIR:-}" ]] && [[ -d "$BACKUP_DIR" ]]; then
        log "Cleaning up temporary backup directory: $BACKUP_DIR"
        rm -rf "$BACKUP_DIR"
    fi
}

# Trap for cleanup on exit
trap cleanup EXIT

log "Starting PostgreSQL backup..."

# Create backup directory
mkdir -p "$BACKUP_DIR" || error_exit "Failed to create backup directory"

# Find the PostgreSQL container
CONTAINER_ID=$(docker ps --filter "name=${POSTGRES_CONTAINER}" --format "{{"{{"}}.ID{{"}}"}}" | head -n1)
if [[ -z "$CONTAINER_ID" ]]; then
    error_exit "PostgreSQL container not found: ${POSTGRES_CONTAINER}"
fi

log "Found PostgreSQL container: $CONTAINER_ID"

# Create database dump
log "Creating database dump..."
docker exec "$CONTAINER_ID" pg_dumpall -U postgres > "${BACKUP_DIR}/postgres_full_dump.sql" || error_exit "Failed to create database dump"

# Create individual database dumps for better granularity
log "Creating individual database dumps..."
DATABASES=$(docker exec "$CONTAINER_ID" psql -U postgres -t -c "SELECT datname FROM pg_database WHERE datistemplate = false AND datname != 'postgres';" | grep -v "^\s*$")

while IFS= read -r db; do
    db=$(echo "$db" | xargs)  # Trim whitespace
    if [[ -n "$db" ]]; then
        log "Dumping database: $db"
        docker exec "$CONTAINER_ID" pg_dump -U postgres -v --create --clean --if-exists "$db" > "${BACKUP_DIR}/postgres_${db}.sql" || log "WARNING: Failed to dump database $db"
    fi
done <<< "$DATABASES"

# Export PostgreSQL configuration
log "Exporting PostgreSQL configuration..."
docker exec "$CONTAINER_ID" cat /var/lib/postgresql/data/postgresql.conf > "${BACKUP_DIR}/postgresql.conf" 2>/dev/null || log "WARNING: Could not export postgresql.conf"
docker exec "$CONTAINER_ID" cat /var/lib/postgresql/data/pg_hba.conf > "${BACKUP_DIR}/pg_hba.conf" 2>/dev/null || log "WARNING: Could not export pg_hba.conf"

# Create backup metadata
cat > "${BACKUP_DIR}/backup_metadata.json" << EOF
{
    "backup_type": "postgresql",
    "timestamp": "${TIMESTAMP}",
    "container_id": "${CONTAINER_ID}",
    "container_name": "${POSTGRES_CONTAINER}",
    "backup_method": "pg_dumpall + pg_dump",
    "created_by": "$(whoami)@$(hostname)",
    "created_at": "$(date -Iseconds)"
}
EOF

# Calculate backup size
BACKUP_SIZE=$(du -sh "$BACKUP_DIR" | cut -f1)
log "PostgreSQL backup completed successfully. Size: $BACKUP_SIZE"

# Clean up old backups (keep only last N days)
log "Cleaning up old PostgreSQL backups (keeping last ${BACKUP_RETENTION_DAYS} days)..."
find "${POSTGRES_BACKUP_PATH}" -maxdepth 1 -type d -name "20*" -mtime +${BACKUP_RETENTION_DAYS} -exec rm -rf {} \; 2>/dev/null || true

log "PostgreSQL backup finished: $BACKUP_DIR" 