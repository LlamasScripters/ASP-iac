#!/bin/bash

# ASPHub Backup Validation Script
# This script validates all backup repositories and their integrity

set -euo pipefail

# Load environment variables
source /opt/backup/.env

LOG_FILE="${BACKUP_LOG_FILE}"
VALIDATION_REPORT="/var/log/backup/validation_report_$(date +%Y%m%d_%H%M%S).json"

# Functions
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [VALIDATION] $1" | tee -a "${LOG_FILE}"
}

error_exit() {
    log "ERROR: $1"
    exit 1
}

validate_repository() {
    local repo_type="$1"
    local repo_path="$2"
    local passphrase_var="$3"
    
    log "Validating $repo_type repository: $repo_path"
    
    local validation_result="success"
    local error_message=""
    local snapshot_count=0
    local latest_snapshot=""
    local total_size=""
    
    export PLAKAR_REPOSITORY_PASSPHRASE="${!passphrase_var}"
    
    # Test repository access
    if ! plakar at "$repo_path" ls >/dev/null 2>&1; then
        validation_result="failed"
        error_message="Repository access failed"
        log "❌ $repo_type repository access failed"
    else
        log "✓ $repo_type repository accessible"
        
        # Count snapshots
        snapshot_count=$(plakar at "$repo_path" ls | wc -l)
        log "✓ Found $snapshot_count snapshots in $repo_type repository"
        
        if [[ $snapshot_count -gt 0 ]]; then
            # Get latest snapshot
            latest_snapshot=$(plakar at "$repo_path" ls | tail -n1 | awk '{print $2}')
            total_size=$(plakar at "$repo_path" ls | tail -n1 | awk '{print $3, $4}')
            
            log "✓ Latest snapshot: $latest_snapshot"
            log "✓ Total size: $total_size"
            
            # Verify latest snapshot integrity
            if plakar at "$repo_path" check "$latest_snapshot" >/dev/null 2>&1; then
                log "✓ Latest snapshot integrity verified"
            else
                validation_result="warning"
                error_message="Latest snapshot integrity check failed"
                log "⚠️ Latest snapshot integrity check failed"
            fi
        else
            validation_result="warning"
            error_message="No snapshots found"
            log "⚠️ No snapshots found in repository"
        fi
    fi
    
    # Create validation result
    cat >> "$VALIDATION_REPORT" << EOF
    "${repo_type}": {
        "repository_path": "${repo_path}",
        "status": "${validation_result}",
        "error_message": "${error_message}",
        "snapshot_count": ${snapshot_count},
        "latest_snapshot": "${latest_snapshot}",
        "total_size": "${total_size}",
        "validated_at": "$(date -Iseconds)"
    },
EOF

    return $([[ "$validation_result" == "failed" ]] && echo 1 || echo 0)
}

test_restore_operation() {
    local repo_type="$1"
    local repo_path="$2"
    local passphrase_var="$3"
    
    log "Testing restore operation for $repo_type repository"
    
    export PLAKAR_REPOSITORY_PASSPHRASE="${!passphrase_var}"
    
    # Get latest snapshot
    local latest_snapshot
    latest_snapshot=$(plakar at "$repo_path" ls | tail -n1 | awk '{print $2}')
    
    if [[ -n "$latest_snapshot" ]]; then
        # Create temporary restore directory
        local temp_restore_dir="/tmp/backup_validation_${RANDOM}"
        mkdir -p "$temp_restore_dir"
        
        # Try to restore a small portion (just metadata files)
        if plakar at "$repo_path" restore -to "$temp_restore_dir" "$latest_snapshot:/opt/backup/data" >/dev/null 2>&1; then
            log "✓ Test restore successful for $repo_type"
            rm -rf "$temp_restore_dir"
            return 0
        else
            log "❌ Test restore failed for $repo_type"
            rm -rf "$temp_restore_dir"
            return 1
        fi
    else
        log "❌ No snapshots available for restore test in $repo_type"
        return 1
    fi
}

check_connectivity() {
    log "Checking connectivity to backup destinations..."
    
    # Test SFTP connectivity
    if ssh -q -o BatchMode=yes -o ConnectTimeout=10 {{ vault_backup_sftp_user }}@{{ vault_backup_sftp_host }} exit 2>/dev/null; then
        log "✓ SFTP host connectivity OK"
    else
        log "⚠️ SFTP host connectivity failed"
    fi
    
    # Test S3 connectivity (using AWS CLI if available)
    if command -v aws &> /dev/null; then
        if aws s3 ls {{ vault_backup_s3_bucket }} >/dev/null 2>&1; then
            log "✓ S3 bucket connectivity OK"
        else
            log "⚠️ S3 bucket connectivity failed"
        fi
    else
        log "⚠️ AWS CLI not available, skipping S3 connectivity test"
    fi
}

generate_summary() {
    local total_repositories="$1"
    local failed_repositories="$2"
    local validation_duration="$3"
    
    # Complete the JSON report
    sed -i '$ s/,$//' "$VALIDATION_REPORT"  # Remove trailing comma
    cat >> "$VALIDATION_REPORT" << EOF
    },
    "summary": {
        "total_repositories": ${total_repositories},
        "failed_repositories": ${failed_repositories},
        "success_rate": $(echo "scale=2; (${total_repositories} - ${failed_repositories}) * 100 / ${total_repositories}" | bc),
        "validation_duration_seconds": ${validation_duration},
        "validated_at": "$(date -Iseconds)"
    }
}
EOF

    log "=== Validation Summary ==="
    log "Total repositories: $total_repositories"
    log "Failed repositories: $failed_repositories"
    log "Success rate: $(echo "scale=2; (${total_repositories} - ${failed_repositories}) * 100 / ${total_repositories}" | bc)%"
    log "Validation report: $VALIDATION_REPORT"
}

# Main validation process
START_TIME=$(date +%s)

log "Starting backup validation process..."

# Initialize validation report
cat > "$VALIDATION_REPORT" << EOF
{
    "validation_id": "validation_$(date +%Y%m%d_%H%M%S)",
    "started_at": "$(date -Iseconds)",
    "repositories": {
EOF

# Check connectivity first
check_connectivity

# Validate each repository
FAILED_COUNT=0
TOTAL_COUNT=3

log "=== Repository Validation ==="

# Validate local repository
if ! validate_repository "local" "$LOCAL_REPO_PATH" "LOCAL_REPO_PASSPHRASE"; then
    ((FAILED_COUNT++))
fi

# Validate SFTP repository
if ! validate_repository "sftp" "$SFTP_REPO_PATH" "SFTP_REPO_PASSPHRASE"; then
    ((FAILED_COUNT++))
fi

# Validate S3 repository
if ! validate_repository "s3" "$S3_REPO_PATH" "S3_REPO_PASSPHRASE"; then
    ((FAILED_COUNT++))
fi

log "=== Restore Testing ==="

# Test restore operations
if test_restore_operation "local" "$LOCAL_REPO_PATH" "LOCAL_REPO_PASSPHRASE"; then
    log "✓ Local restore test passed"
else
    log "❌ Local restore test failed"
fi

if test_restore_operation "sftp" "$SFTP_REPO_PATH" "SFTP_REPO_PASSPHRASE"; then
    log "✓ SFTP restore test passed"
else
    log "❌ SFTP restore test failed"
fi

if test_restore_operation "s3" "$S3_REPO_PATH" "S3_REPO_PASSPHRASE"; then
    log "✓ S3 restore test passed"
else
    log "❌ S3 restore test failed"
fi

# Calculate validation duration
VALIDATION_DURATION=$(($(date +%s) - START_TIME))

# Generate summary
generate_summary "$TOTAL_COUNT" "$FAILED_COUNT" "$VALIDATION_DURATION"

# Exit with appropriate code
if [[ $FAILED_COUNT -eq 0 ]]; then
    log "✅ All backup validations completed successfully"
    exit 0
else
    log "❌ $FAILED_COUNT out of $TOTAL_COUNT repositories failed validation"
    exit 1
fi 